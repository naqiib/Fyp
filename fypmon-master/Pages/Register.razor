@page "/register"
@using BlazorServerAuthenticationAndAuthorization.Authentication
@using BlazorServerAuthenticationAndAuthorization.Data
@using Microsoft.AspNetCore.Components.Forms
@inject UserAccountService UserAccountService
@inject NavigationManager Navigation

<link href="/css/Register.css" rel="stylesheet" />

<EditForm Model="newUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-container">
        <p class="title">Create a New Account</p>
        <div class="form">
            <div>
                <InputText class="input" placeholder="Email" @bind-Value="newUser.Email" />
                @if (!string.IsNullOrEmpty(emailMessage))
                {
                    <div class="error-message">@emailMessage</div>
                }
            </div>
            <div>
                <InputText class="input" placeholder="Username" @bind-Value="newUser.UserName" />
                @if (!string.IsNullOrEmpty(usernameMessage))
                {
                    <div class="error-message">@usernameMessage</div>
                }
            </div>
            <div>
                <InputText class="input" placeholder="Password" type="password" @bind-Value="newUser.Password" />
            </div>
            <button type="submit" class="form-btn">Register</button>
        </div>
        <p class="sign-up-label">
            Already have an account? <span class="sign-up-link" @onclick="NavigateToLogin">Login here</span>
        </p>
    </div>
</EditForm>

@code {
    private UserInfo newUser = new UserInfo();

    private string emailMessage = string.Empty;

    private string usernameMessage = string.Empty;



    private async Task HandleValidSubmit()

    {

        if (string.IsNullOrEmpty(newUser.Email))

        {

            emailMessage = "Email is required.";

            return;

        }



        var existingUserByEmail = await UserAccountService.GetByEmailAsync(newUser.Email);

        if (existingUserByEmail != null)

        {

            emailMessage = "Email already exists.";

            return;

        }



        if (string.IsNullOrEmpty(newUser.UserName))

        {

            usernameMessage = "Username is required.";

            return;

        }



        var existingUserByUsername = await UserAccountService.GetByUserNameAsync(newUser.UserName);

        if (existingUserByUsername != null)

        {

            usernameMessage = "Username already exists.";

            return;

        }



        // Set the role to "User" by default

        newUser.Role = "User";



        var result = await UserAccountService.CreateUserAsync(newUser);

        if (result)

        {

            Navigation.NavigateTo("/login");

        }

    }



    private void NavigateToLogin()

    {

        Navigation.NavigateTo("/login");

    }
}