@page "/contact-us"
@using System.ComponentModel.DataAnnotations
@using System.Net.Mail
@using System.Net
@inject IJSRuntime js

<PageTitle>Contact Us</PageTitle>
<link href="/css/HaS.css" rel="stylesheet" />
<div class="page">
    <h3>Contact Us</h3>
    <EditForm Model="@contactForm" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" class="contact-form">
        <DataAnnotationsValidator />
        <ValidationSummary class="validation-summary" />

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="contactForm.Name" />
            <ValidationMessage For="@(() => contactForm.Name)" class="validation-message" />
        </div>

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="contactForm.Email" />
            <ValidationMessage For="@(() => contactForm.Email)" class="validation-message" />
        </div>

        <div class="form-group">
            <label for="subject">Subject:</label>
            <InputText id="subject" class="form-control" @bind-Value="contactForm.Subject" />
            <ValidationMessage For="@(() => contactForm.Subject)" class="validation-message" />
        </div>

        <div class="form-group">
            <label for="message">Message:</label>
            <InputTextArea id="message" class="form-control" @bind-Value="contactForm.Message" />
            <ValidationMessage For="@(() => contactForm.Message)" class="validation-message" />
        </div>

        <button type="submit" class="btn btn-primary">Send</button>
    </EditForm>
</div>


@code {
    private ContactForm contactForm = new ContactForm();

    private async Task HandleValidSubmit()
    {
        try
        {
            await SendEmailAsync(contactForm);
            js.InvokeVoidAsync("alert", "Email sent successfully!");
        }
        catch (Exception ex)
        {
            js.InvokeVoidAsync("alert", $"Failed to send email: {ex.Message}");
        }
    }

    private void HandleInvalidSubmit()
    {
        js.InvokeVoidAsync("alert", "Please fill in all required fields.");
    }

    private async Task SendEmailAsync(ContactForm form)
    {
        var smtpClient = new SmtpClient("smtp.gmail.com")
            {
                Port = 587,
                Credentials = new NetworkCredential("fyppro95@gmail.com", "jpns bmhm tyvm hpgz"),
                EnableSsl = true,
            };

        var mailMessage = new MailMessage
            {
                From = new MailAddress("fyppro95@gmail.com"),
                Subject = form.Subject,
                Body = $"Name: {form.Name}\nEmail: {form.Email}\n\n{form.Message}",
                IsBodyHtml = false,
            };

        mailMessage.To.Add("fyppro95@gmail.com");

        await smtpClient.SendMailAsync(mailMessage);
    }

    public class ContactForm
    {
        [Required]
        [StringLength(100, ErrorMessage = "Name is too long.")]
        public string Name { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(100, ErrorMessage = "Subject is too long.")]
        public string Subject { get; set; } = string.Empty;

        [Required]
        [StringLength(500, ErrorMessage = "Message is too long.")]
        public string Message { get; set; } = string.Empty;
    }
}



 